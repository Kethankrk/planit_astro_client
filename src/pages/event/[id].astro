---
import MainLayout from "@/layout/MainLayout.astro";
import { TicketCard } from "@/components/event/TicketCard";
import { CreateTicketOption } from "@/components/event/CreateTicket";
import EventUserInteractionSection from "@/components/event/EventUserInteractionSection";
import { MapPinCheckInside, Calendar } from "lucide-react";
import { Image } from "astro:assets";
import { EventService } from "@/services/event";
import { TicketService } from "@/services/ticket";
import {ContributorService} from "@/services/contributor"
import { CustomError } from "@/lib/api";
import { CallforContributorsForm } from "@/components/event/CreateCallForContributors";
import type { EventSelectType } from "@/db/schema/event";
const { id } = Astro.params;
let eventData: EventSelectType;
let tickets = [];
let contributors = []
let purchasedTicketIds: number[] = []
let isOwner = false;
try {
  const eventId = Number(id)
  eventData = await EventService.getInstance().get(eventId);

  if(eventData.userId == Astro.locals.user!.id){
    isOwner = true;
  }

  tickets = await TicketService.getInstance().getAll(eventId);

  contributors = await ContributorService.getInstance().getAll(eventId)

  const purchasedTickets = await TicketService.getInstance().ticketsFromOneEvent(eventId, Astro.locals.user!.email)
  purchasedTicketIds = purchasedTickets.map(ticket => ticket.id)
} catch (error) {
  if (error instanceof CustomError && error.statusCode === 404) {
    return Astro.redirect("/404");
  }
  console.log(error);
  return Astro.redirect("/500");
}
---

<MainLayout>
  <div class="w-full pb-20">
    <div class="flex w-full bg-secondary rounded-lg">
      <Image
        width={50}
        height={50}
        src={eventData.banner}
        class="h-[400px] w-auto mx-auto"
        alt="event banner"
      />
    </div>
    <div class="flex justify-between items-center">
      <h2 class="text-3xl font-bold mt-5">{eventData.title}</h2>
      <EventUserInteractionSection client:only />
    </div>
    <div class="flex gap-10 mt-5">
      <div class="flex gap-1">
        <Calendar className="text-blue-400" />
        <span
          >{eventData.startAt.toLocaleString()} - {
            eventData.endingAt.toLocaleString()
          }</span
        >
      </div>
      <div class="flex gap-1">
        <MapPinCheckInside className="text-blue-400" />
        <span>{eventData.location}</span>
      </div>
    </div>
    <p class="mt-10">
      {eventData.description}
    </p>
    {
      eventData.requirements && (
      <h2 class="text-2xl font-bold mt-20">Requirements</h2>
      <p class="mt-2">
        Lorem, ipsum dolor sit amet consectetur adipisicing elit. Dignissimos, ex!
      </p>
      )
    }
    <div class="flex justify-between items-center mt-20">
      <h2 class="text-2xl font-bold">Tickets</h2>
      {isOwner &&
        <CreateTicketOption client:load eventId={id!} buttonText="Create Ticket" />
      }
    </div>
    {
      !tickets.length && (
        <p class="font-semibold mt-5">No tickets found, Please create one</p>
      )
    }
    <div class="mt-5 grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-5">
      {
        tickets.map((ticket) => (
          <TicketCard
            ticket={ticket}
            editable={isOwner}
            purchased={purchasedTicketIds.includes(ticket.id)}
            client:load
          />
        ))
      }
    </div>
    <div class="flex justify-between items-center mt-20">
      <h2 class="text-2xl font-bold">Contributors</h2>
      <CallforContributorsForm buttonText="Create call for contributors" eventId={id!} client:load/>
    </div>
    <div class="mt-5 grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-5">
      {
        contributors.map(contributor => (
          <p>{contributor.name}</p>
        ))
      }
    </div>
  </div>
</MainLayout>
